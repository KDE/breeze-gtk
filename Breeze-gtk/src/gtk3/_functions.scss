//
// Theme color functions
//

// Button Color
@function b_color($c: normal) {
  @if $c == normal {
    @return $Button_BackgroundNormal;
  }
  @if $c == hover {
    @return $Button_DecorationHover;
  }
  @if $c == active {
    @return $Button_DecorationFocus;
  }
  @if $c == text {
    @return $Button_ForegroundNormal;
  }
  @if $c == active-text {
    @return $Selection_ForegroundNormal;
  }
}

// Selection Color
@function s_color($c: normal) {
  @if $c == normal {
    @return $Selection_BackgroundNormal;
  }
  @if $c == text {
    @return $Selection_ForegroundNormal;
  }
  @if $c == backdrop {
    @return transparentize($Selection_BackgroundNormal,0.5);
  }
}

// View Color
@function v_color($c: normal) {
  @if $c == normal {
    @return $View_BackgroundNormal;
  }
  @if $c == hover {
    @return $View_DecorationHover;
  }
  @if $c == active {
    @return $View_DecorationFocus;
  }
  @if $c == text {
    @return $View_ForegroundNormal;
  }
}

// Window Color
@function w_color($c: normal) {
  @if $c == normal {
    @return $Window_BackgroundNormal;
  }
  @if $c == text {
    @return $Window_ForegroundNormal;
  }
}

// Titlebar color
@function t_color($c: text) {
  @if $c == text {
    @return $WM_activeForeground;
  }
  @if $c == background {
    @return $WM_activeBackground;
  }
  @if $c == backdrop-text {
    @return $WM_inactiveForeground;
  }
  @if $c == backdrop-background {
    @return $WM_inactiveBackground;
  }
}

@function tooltip($c: text) {
  @if $c == text {
    @return $Tooltip_ForegroundNormal;
  }
  @if $c == background {
    @return $Tooltip_BackgroundNormal;
  }
}

@function button_gradient($c, $state: normal) {
  @if $state == normal {
    @return linear-gradient(to bottom, change-color($c, $lightness: lightness($c)*1.01), change-color($c, $lightness:lightness($c)/1.03));
  }
  @else {
    @return linear-gradient(to bottom, change-color($c, $lightness: lightness($c)*1.03), change-color($c, $lightness:lightness($c)/1.10));
  }
}

$border_color: mix($Window_BackgroundNormal,$Window_ForegroundNormal, 75%);
$menu_color: mix($Window_BackgroundNormal,$View_BackgroundNormal, 30%);
$link_color: $View_ForegroundLink;
$link_visited_color: $View_ForegroundVisited;

$warning_color: $View_ForegroundNeutral;
$error_color: $View_ForegroundNegative;
$success_color: $View_ForegroundPositive;
$destructive_color: $error_color;
//
// Color effects
//
//
// Color maps for color effect functions
//
$Color: (
  Disabled: $Disabled_Color,
  Inactive: $Inactive_Color
  );
$ColorAmount: (
  Disabled: $Disabled_ColorAmount,
  Inactive: $Inactive_ColorAmount
  );
$ColorEffect: (
  Disabled: $Disabled_ColorEffect,
  Inactive: $Inactive_ColorEffect
  );
$ContrastAmount: (
  Disabled: $Disabled_ContrastAmount,
  Inactive: $Inactive_ContrastAmount
  );
$ContrastEffect: (
  Disabled: $Disabled_ContrastEffect,
  Inactive: $Inactive_ContrastEffect
  );
$IntensityAmount: (
  Disabled: $Disabled_IntensityAmount,
  Inactive: $Inactive_IntensityAmount
  );
$IntensityEffect: (
  Disabled: $Disabled_IntensityEffect,
  Inactive: $Inactive_IntensityEffect
  );

$r: 3px; // standard radius

@function insensitive($c) {
  @return Color(Intensity(Contrast($c, Disabled), Disabled), Disabled);
}

@function backdrop($c) {
  @if $Inactive_Enable == true {
    @return Color(Intensity(Contrast($c, Inactive), Inactive), Inactive);
  }
  @else {
    @return $c;
  }
}

@function Contrast($c, $state) {

  @if map-get($ContrastEffect, $state) == 0 {
    @return $c;
  }

  @if map-get($ContrastEffect, $state) == 1 {
    @if lightness(w_color()) > lightness(w_color(text)) {
      @if lightness($c) < lightness(w_color()) or ($c == t_color(text) and lightness(t_color(background)) <= lightness(t_color(text))) {
        @return transparentize($c, map-get($ContrastAmount, $state));
      }
      @else { @return $c; }
    }
    @if lightness(w_color()) <= lightness(w_color(text)) {
      @if lightness($c) > lightness(w_color()) or ($c == t_color(text) and lightness(t_color(background)) > lightness(t_color(text))) {
        @return transparentize($c, map-get($ContrastAmount, $state));
      }
      @else { @return $c; }
    }
  }

  @if map-get($ContrastEffect, $state) == 2 {
    @if lightness(w_color()) > lightness(w_color(text)) {  // don't know what a reasonable lightness treshhold is for Contrast
      @if lightness($c) < lightness(w_color()) or ($c == t_color(text) and lightness(t_color(background)) <= lightness(t_color(text))) {
        @return transparentize($c, map-get($ContrastAmount, $state));
      }
      @else { @return $c; }
    }
    @if lightness(w_color()) <= lightness(w_color(text)) {
      @if lightness($c) > lightness(w_color()) or ($c == t_color(text) and lightness(t_color(background)) > lightness(t_color(text))){
        @return transparentize($c, map-get($ContrastAmount, $state));
      }
      @else { @return $c; }
    }
  }
}

@function Color($c, $state) {

  @if map-get($ColorEffect, $state) ==0 {
    @return $c;
  }

  @if map-get($ColorEffect, $state) ==1 {
    @if map-get($ColorAmount, $state) >=0 {
      @return desaturate($c, percentage(map-get($ColorAmount, $state)));
    }
    @else {
      @return saturate($c, percentage(abs(map-get($ColorAmount, $state))));
    }
  }

  @if map-get($ColorEffect, $state)==2 or map-get($ColorEffect, $state)==3 { // 2 and 3 seem to do the same
    @return mix(map-get($Color, $state),$c, percentage(map-get($ColorAmount, $state)));
  }
}

@function Intensity($c, $state) {

  @if map-get($IntensityEffect, $state) == 0 {
    @return $c;
  }
  @if map-get($IntensityEffect, $state) == 1 {
    @if map-get($IntensityAmount, $state) >= 0 {
      @return mix(white, $c, percentage(map-get($IntensityAmount, $state)));
    }
    @else {
      @return mix(black, $c, percentage(abs(map-get($IntensityAmount, $state))));
    }
  }

  @if map-get($IntensityEffect, $state) == 2 {
    @if map-get($IntensityAmount, $state) >= 0 {
      @return darken($c, percentage(map-get($IntensityAmount, $state)));
    }
    @else {
      @return lighten($c, percentage(abs(map-get($IntensityAmount, $state))));
    }
  }

  @if map-get($IntensityEffect, $state) == 3 {
    @if map-get($IntensityAmount, $state) >=0 {
      @return lighten($c, percentage(map-get($IntensityAmount, $state)));
    }
    @else {
      @return darken($c, percentage(abs(map-get($IntensityAmount, $state))));
    }
  }
}
