@mixin entry($t, $fc:border(active,v)) {
//
// Entries drawing function
//
// $t: entry type
// $fc: focus color
// $edge: set to none to not draw the bottom edge or specify a color to not
//        use the default one
//
// possible $t values:
// normal, focus, insensitive, backdrop, backdrop-insensitive, osd, osd-focus, osd-backdrop;
//
  @if $t==normal {
    color: fg_color(v);
    border-color: border(normal);
    background-color: bg_color(v);
    box-shadow: none;
  }

  @if $t==focus {
    border-color: $fc;
  }

  @if $t==insensitive {
    color: insensitive(fg_color(v));
    border-color: insensitive(border(normal));
    background-color: insensitive(bg_color(v));
  }

  @if $t==backdrop {
    color: backdrop(fg_color(v));
    border-color: backdrop(border(normal));
    background-color: backdrop(bg_color(v));
  }

  @if $t==backdrop-insensitive {
    color: backdrop(insensitive(fg_color(v)));
    border-color: backdrop(insensitive(border(normal)));
    background-color: backdrop(insensitive(bg_color(v)));
  }
  @if $t==osd { //TODO remove
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: $osd_bg_color;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    icon-shadow: none;
  }
  @if $t==osd-focus { //TODO remove
    color: $osd_text_color;
    border-color: $selected_bg_color;
    background-color: $osd_bg_color;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    icon-shadow: none;
  }
  @if $t==osd-insensitive { //TODO remove
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-color: $osd_insensitive_bg_color;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    icon-shadow: none;
  }
  @if $t==osd-backdrop { //TODO remove
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: $osd_borders_color;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    icon-shadow: none;
  }
}

/****************
 * Text Entries *
 ****************/

.entry {
  border: 1px solid;
  padding: 5px 8px 5px;

  &.image { // icons inside the entry
    &.left { padding-left: 0; }
    &.right { padding-right: 0; }
  }

  border-radius: $r;
  transition: all 200ms $ease-out-quad;
  @include entry(normal);

  &.flat, &.flat:focus { //what is it? FIXME
    padding: 2px;
    @include entry(normal);
    border: none;
    border-radius: 0;
  }

  &:focus { @include entry(focus); }
  &:insensitive { @include entry(insensitive); }
  &:backdrop { @include entry(backdrop); }
  &:backdrop:insensitive { @include entry(backdrop-insensitive); }

  &:selected,
  &:selected:focus {
    @extend %selected_items;
  }

  &.progressbar {
    margin: 1px;
    border-radius: 0;
    border-width: 0 0 2px;
    border-color: selection(bg,normal);
    border-style: solid;
    background-image: none;
    background-color: transparent;
    box-shadow: none;
    &:backdrop {
      background-color: transparent;
      border-color: backdrop(selection(bg, backdrop));
    }
  }

  @each $e_type, $e_color in (error, $error_color),
                             (warning, $warning_color) {
    &.#{$e_type} {
      color: $e_color;
      border-color: $e_color;
      background-color: transparentize($e_color, 0.5);
      &:focus {
        @include entry(focus, $e_color);
        background-color: transparentize($e_color, 0.5);
      }
      &:selected, &:selected:focus { background-color: $e_color; }
      &:backdrop {
        color: backdrop($e_color);
        border-color: backdrop($e_color);
        background-color: backdrop(transparentize($e_color, 0.5));
      }
    }
  }

  &.image { // entry icons colors
    color: mix(fg_color(w),fg_color(v), 80%);
    &:hover { color: selection(bg, hover); }
    &:active { color: selection(bg,active); }
    &:backdrop { color: backdrop(mix(fg_color(w), fg_color(v), 80%)); }
  }
}
