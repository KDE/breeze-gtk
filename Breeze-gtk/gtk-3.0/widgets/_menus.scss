/*********
 * Menus *
 *********/
 /* menu buttons */
 .menuitem.button.flat {
   @extend %undecorated_button;
   color: fg_color(w);
   &:hover { background-color: selection(bg); }
   &:selected { @extend %selected_items; }
   &:backdrop, &:backdrop:hover {
     @extend %undecorated_button;
     color: backdrop(fg_color(w));
   }
 }

.menubar {
  -GtkWidget-window-dragging: true;
  padding: 0px;
  box-shadow: none;
  background-color: bg_color(w);
  &:backdrop {
    background-color: backdrop(bg_color(w));
  }
  & > .menuitem {
    padding: 6px 8px;
    border: 1px solid bg_color(w);
    &:hover { //Seems like it :hover even with keyboard focus
      background-color: selection(bg);
      color: selection(fg);
    }
    &:insensitive {
      color: insensitive(fg_color(w));
      box-shadow: none;
      &:backdrop {
        background-color: backdrop(bg_color(w));
        color: backdrop(insensitive(fg_color(w)));
      }
    }
    &:backdrop {
      background-color: backdrop(bg_color(w));
      border-color: backdrop(bg_color(w));
      color: backdrop(fg_color(w));
    }
  }
}

.menu {
  padding: 0px;
  background-color: bg_color(w);
  border: 1px solid border(normal); // adds borders in a non composited env
  border-radius: $r;
  .csd & { border: 1px solid border(normal); }  // axes borders in a composited env
  .separator {color: border(normal);}
  .menuitem {
	text-shadow: none;
    padding: 8px 4px;
    &:hover {
      color: selection(fg);
      background-color: selection(bg);
      background-clip: padding-box;
      border: 2px solid transparent;
    }
    &:insensitive {
      color: insensitive(fg_color(w));
      &:backdrop { color: backdrop(insensitive(fg_color(w))); }
    }
    &:backdrop, &:backdrop:hover {
      color: backdrop(fg_color(w));
      background-color: backdrop(bg_color(w));
    }
    //submenu indicators
    &.arrow { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic'); }
    &.arrow:dir(rtl) {-gtk-icon-source:-gtk-icontheme('pan-end-symbolic-rtl'); }
  }
}

.menuitem .accelerator { color: gtkalpha(currentColor,0.5); }
/***************
 * Popovers   *
 ***************/

.popover {
  margin: 10px;
  padding: 0px;
  border: 1px solid border(normal);
  border-radius: 3px;
  background-color: bg_color(w);

  box-shadow: 0 2px 3px transparentize(black, 0.2);

  &:backdrop {
    box-shadow: none;
  }

  > .list,
  > .view,
  > .toolbar,
  &.osd > .toolbar {
    border-style: none;
    background-color: transparent;
  }
  .button.flat {
    border-radius: 0px;
	  color: fg_color(w);
    .label { padding: 4px 0px; }
    &:hover,
    &:checked:hover {
      background-image: none;
      background-color: selection(bg);
    	color: selection(fg);
      transition: none;
    }

    &:backdrop {
      background-color: transparent;
    	color: backdrop(fg_color(w));
    }
  }

  &.osd { @extend %osd; }

}

//touch selection handlebars for the Popover.osd above
.entry.cursor-handle,
.cursor-handle {
  background-color: transparent;
  background-image: none;
  box-shadow: none;
  border-style: none;
  &.top { -gtk-icon-source: -gtk-icontheme('selection-start-symbolic'); }
  &.bottom { -gtk-icon-source: -gtk-icontheme('selection-end-symbolic'); }
}

.scale-popup .button,
.scale-popup .button.flat { // +/- buttons on GtkVolumeButton popup
  @extend %undecorated_button;
  background-color: transparent;
  padding: 5px;
  color: fg_color(w);
  &:hover {
    @extend %undecorated_button;
    color: border(hover);
  }
  &:active {
    color: border(active);
  }
  &:insensitive {
    color: insensitive(fg_color(w));
  }
  &:backdrop {
    color: backdrop(fg_color(w));
    &:insensitive {
      color: backdrop(insensitive(fg_color(w)));
    }
  }
}

GtkVolumeButton.button { padding: 5px; }
