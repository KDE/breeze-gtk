//
// Theme color functions
//

// fg color
@function fg_color($widget: w) {

  @if $widget == w {                                  // fg_color
    @return $Window_ForegroundNormal;
  }

  @if $widget == b {                                  // button_fg_color
    @return $Button_ForegroundNormal;
  }

  @if $widget == v {                                  // text_color
    @return $View_ForegroundNormal;
  }

  @if $widget == t {
    @return $Tooltip_ForegroundNormal;              // tooltip_fg_color
  }

  @if $widget == s {
    @return transparentize($View_ForegroundNormal, 0.5); // scrollbar slider
  }
}

// bg color
@function bg_color($widget: w) {

  @if $widget == w {                                  // bg_color
    @return $Window_BackgroundNormal;
  }

  @if $widget == b {                                  // button_bg_color
    @return $Button_BackgroundNormal;
  }

  @if $widget == v {                                  // base_color
    @return $View_BackgroundNormal;
  }

  @if $widget == t {
    @return $Tooltip_BackgroundNormal;                // tooltip_bg_color
  }

  @if $widget == s {
    @return transparentize($Window_ForegroundNormal, 0.7); // scrollbar trough
  }
  @if $widget == o {                                  // osd background
    @return transparentize($Window_BackgroundNormal, 0.2);
  }
}

// selected bg color
@function selection($c, $state:normal) {
  @if $c == bg {
    @if $state == backdrop and $Inactive_ChangeSelectionColor == true {
      @return transparentize($Selection_BackgroundNormal, 0.8);  // don't know, just guessing
    }
    @if $state == hover {
    @return $Button_DecorationHover;
    }
    @else {
      @return $Selection_BackgroundNormal;
    }
  }
  @if $c == fg {
    @return $Selection_ForegroundNormal;
  }
}

// Borders/Decoration
@function border($t: normal, $widget: b) {

  @if $t == normal {
    @return $borders_color;
  }

  @if $t == hover {
    @if $widget == b {
      @return $Button_DecorationHover;
    }
    @else {
      @return $View_DecorationHover;
    }
  }

  @if $t == active {
    @if $widget == b {
      @return $Button_DecorationFocus;
    }
    @else {
      @return $View_DecorationFocus;  // for entry
    }
  }
}

@function titlebar($c, $state: normal) {
  @if $c == bg {
    @if $state == normal {
      @return $WM_activeBackground;
    }
    @else {
      @return $WM_inactiveBackground;
    }
  }

  @if $c == fg {
    @if $state == normal {
      @return $WM_activeForeground;
    }
    @else {
      @return $WM_inactiveForeground;
    }
  }
}

@function button_gradient($c, $state: normal) {
  @if $state == normal {
    @return linear-gradient(to bottom, change-color($c, $lightness: lightness($c)*1.01), change-color($c, $lightness:lightness($c)/1.03));
  }
  @else {
    @return linear-gradient(to bottom, change-color($c, $lightness: lightness($c)*1.03), change-color($c, $lightness:lightness($c)/1.10));
  }
}


//
// Color effects
//

@function insensitive($c) {
  @return Color(Intensity(Contrast($c, Disabled), Disabled), Disabled);
}

@function backdrop($c) {
  @if $Inactive_Enable == true {
    @return Color(Intensity(Contrast($c, Inactive), Inactive), Inactive);
  }
  @else {
    @return $c;
  }
}

@function Contrast($c, $state) {

  @if map-get($ContrastEffect, $state) == 0 {
    @return $c;
  }

  @if map-get($ContrastEffect, $state) == 1 {  // can't see the difference between 1 and 2, should ask someone
    @if lightness(bg_color(w)) > lightness(fg_color(w)) {  // don't know what a reasonable lightness treshhold is for Contrast
      @if lightness($c) < lightness(bg_color(w)) or ($c == $WM_activeForeground and lightness($WM_activeBackground) <= lightness($WM_activeForeground)) {
        @return transparentize($c, map-get($ContrastAmount, $state));
      }
      @else { @return $c; }
    }
    @if lightness(bg_color(w)) <= lightness(fg_color(w)) {
      @if lightness($c) > lightness(bg_color(w)) or ($c == $WM_activeForeground and lightness($WM_activeBackground) > lightness($WM_activeForeground)) {
        @return transparentize($c, map-get($ContrastAmount, $state));
      }
      @else { @return $c; }
    }
  }

  @if map-get($ContrastEffect, $state) == 2 {
    @if lightness(bg_color(w)) > lightness(fg_color(w)) {  // don't know what a reasonable lightness treshhold is for Contrast
      @if lightness($c) < lightness(bg_color(w)) or ($c == $WM_activeForeground and lightness($WM_activeBackground) <= lightness($WM_activeForeground)) {
        @return transparentize($c, map-get($ContrastAmount, $state));
      }
      @else { @return $c; }
    }
    @if lightness(bg_color(w)) <= lightness(fg_color(w)) {
      @if lightness($c) > lightness(bg_color(w)) or ($c == $WM_activeForeground and lightness($WM_activeBackground) > lightness($WM_activeForeground)){
        @return transparentize($c, map-get($ContrastAmount, $state));
      }
      @else { @return $c; }
    }
  }
}

@function Color($c, $state) {

  @if map-get($ColorEffect, $state) ==0 {
    @return $c;
  }

  @if map-get($ColorEffect, $state) ==1 {
    @if map-get($ColorAmount, $state) >=0 {
      @return desaturate($c, percentage(map-get($ColorAmount, $state)));
    }
    @else {
      @return saturate($c, percentage(abs(map-get($ColorAmount, $state))));
    }
  }

  @if map-get($ColorEffect, $state)==2 or map-get($ColorEffect, $state)==3 { // 2 and 3 seem to do the same
    @return mix(map-get($Color, $state),$c, percentage(map-get($ColorAmount, $state)));
  }
}

@function Intensity($c, $state) {

  @if map-get($IntensityEffect, $state) == 0 {
    @return $c;
  }
  @if map-get($IntensityEffect, $state) == 1 {
    @if map-get($IntensityAmount, $state) >= 0 {
      @return mix(white, $c, percentage(map-get($IntensityAmount, $state)));
    }
    @else {
      @return mix(black, $c, percentage(abs(map-get($IntensityAmount, $state))));
    }
  }

  @if map-get($IntensityEffect, $state) == 2 {
    @if map-get($IntensityAmount, $state) >= 0 {
      @return darken($c, percentage(map-get($IntensityAmount, $state)));
    }
    @else {
      @return lighten($c, percentage(abs(map-get($IntensityAmount, $state))));  //?? Just for testing, need to ask what this does
    }
  }

  @if map-get($IntensityEffect, $state) == 3 {
    @if map-get($IntensityAmount, $state) >=0 {
      @return lighten($c, percentage(map-get($IntensityAmount, $state)));
    }
    @else {
      @return darken($c, percentage(abs(map-get($IntensityAmount, $state))));  //?? Just for testing, need to ask what this does
    }
  }
}
